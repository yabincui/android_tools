#ifndef _UNWIND_DWARF_REGMAP_H_
#define _UNWIND_DWARF_REGMAP_H_

#include <unordered_map>

enum X86_64_REGMAP {
    X86_64_RAX = 0,
    X86_64_RDX = 1,
    X86_64_RCX = 2,
    X86_64_RBX = 3,
    X86_64_RSI = 4,
    X86_64_RDI = 5,
    X86_64_RBP = 6,
    X86_64_RSP = 7,
    X86_64_R8 = 8,
    X86_64_R9 = 9,
    X86_64_R10 = 10,
    X86_64_R11 = 11,
    X86_64_R12 = 12,
    X86_64_R13 = 13,
    X86_64_R14 = 14,
    X86_64_R15 = 15,
    X86_64_RIP = 16,
    X86_64_REG_COUNT = 17
};

static const std::unordered_map<int, const char*> X86_64_REG_NAME_MAP = {
    {X86_64_RAX, "X86_64_RAX"},
    {X86_64_RDX, "X86_64_RDX"},
    {X86_64_RCX, "X86_64_RCX"},
    {X86_64_RBX, "X86_64_RBX"},
    {X86_64_RSI, "X86_64_RSI"},
    {X86_64_RDI, "X86_64_RDI"},
    {X86_64_RBP, "X86_64_RBP"},
    {X86_64_RSP, "X86_64_RSP"},
    {X86_64_R8, "X86_64_R8"},
    {X86_64_R9, "X86_64_R9"},
    {X86_64_R10, "X86_64_R10"},
    {X86_64_R11, "X86_64_R11"},
    {X86_64_R12, "X86_64_R12"},
    {X86_64_R13, "X86_64_R13"},
    {X86_64_R14, "X86_64_R14"},
    {X86_64_R15, "X86_64_R15"},
    {X86_64_RIP, "X86_64_RIP"},
};

enum X86_REGMAP {
    X86_EAX = 0,
    X86_EDX = 1,
    X86_ECX = 2,
    X86_EBX = 3,
    X86_ESP = 4,
    X86_EBP = 5,
    X86_ESI = 6,
    X86_EDI = 7,
    X86_EIP = 8,
    X86_REG_COUNT = 9
};

static const std::unordered_map<int, const char*> X86_REG_NAME_MAP = {
    {X86_EAX, "X86_EAX"},
    {X86_EDX, "X86_EDX"},
    {X86_ECX, "X86_ECX"},
    {X86_EBX, "X86_EBX"},
    {X86_ESI, "X86_ESI"},
    {X86_EDI, "X86_EDI"},
    {X86_EBP, "X86_EBP"},
    {X86_ESP, "X86_ESP"},
    {X86_EIP, "X86_EIP"},
};

enum AARCH64_REGMAP {
  AARCH64_X0 = 0,
  AARCH64_X1 = 1,
  AARCH64_X2 = 2,
  AARCH64_X3 = 3,
  AARCH64_X4 = 4,
  AARCH64_X5 = 5,
  AARCH64_X6 = 6,
  AARCH64_X7 = 7,
  AARCH64_X8 = 8,
  AARCH64_X9 = 9,
  AARCH64_X10 = 10,
  AARCH64_X11 = 11,
  AARCH64_X12 = 12,
  AARCH64_X13 = 13,
  AARCH64_X14 = 14,
  AARCH64_X15 = 15,
  AARCH64_X16 = 16,
  AARCH64_X17 = 17,
  AARCH64_X18 = 18,
  AARCH64_X19 = 19,
  AARCH64_X20 = 20,
  AARCH64_X21 = 21,
  AARCH64_X22 = 22,
  AARCH64_X23 = 23,
  AARCH64_X24 = 24,
  AARCH64_X25 = 25,
  AARCH64_X26 = 26,
  AARCH64_X27 = 27,
  AARCH64_X28 = 28,
  AARCH64_X29 = 29,
  AARCH64_IP = 30,
  AARCH64_SP = 31,
  AARCH64_REG_COUNT = 32
};

static const std::unordered_map<int, const char*> AARCH64_REG_NAME_MAP = {
  {AARCH64_X0, "AARCH64_X0"},
  {AARCH64_X1, "AARCH64_X1"},
  {AARCH64_X2, "AARCH64_X2"},
  {AARCH64_X3, "AARCH64_X3"},
  {AARCH64_X4, "AARCH64_X4"},
  {AARCH64_X5, "AARCH64_X5"},
  {AARCH64_X6, "AARCH64_X6"},
  {AARCH64_X7, "AARCH64_X7"},
  {AARCH64_X8, "AARCH64_X8"},
  {AARCH64_X9, "AARCH64_X9"},
  {AARCH64_X10, "AARCH64_X10"},
  {AARCH64_X11, "AARCH64_X11"},
  {AARCH64_X12, "AARCH64_X12"},
  {AARCH64_X13, "AARCH64_X13"},
  {AARCH64_X14, "AARCH64_X14"},
  {AARCH64_X15, "AARCH64_X15"},
  {AARCH64_X16, "AARCH64_X16"},
  {AARCH64_X17, "AARCH64_X17"},
  {AARCH64_X18, "AARCH64_X18"},
  {AARCH64_X19, "AARCH64_X19"},
  {AARCH64_X20, "AARCH64_X20"},
  {AARCH64_X21, "AARCH64_X21"},
  {AARCH64_X22, "AARCH64_X22"},
  {AARCH64_X23, "AARCH64_X23"},
  {AARCH64_X24, "AARCH64_X24"},
  {AARCH64_X25, "AARCH64_X25"},
  {AARCH64_X26, "AARCH64_X26"},
  {AARCH64_X27, "AARCH64_X27"},
  {AARCH64_X28, "AARCH64_X28"},
  {AARCH64_X29, "AARCH64_X29"},
  {AARCH64_IP, "AARCH64_IP"},
  {AARCH64_SP, "AARCH64_SP"},
};

enum ARM_REGMAP {
  ARM_R0 = 0,
  ARM_R1 = 1,
  ARM_R2 = 2,
  ARM_R3 = 3,
  ARM_R4 = 4,
  ARM_R5 = 5,
  ARM_R6 = 6,
  ARM_R7 = 7,
  ARM_R8 = 8,
  ARM_R9 = 9,
  ARM_R10 = 10,
  ARM_R11 = 11,
  ARM_R12 = 12,
  ARM_SP = 13,
  ARM_LR = 14,
  ARM_PC = 15,
  ARM_REG_COUNT = 16,
};

static const std::unordered_map<int, const char*> ARM_REG_NAME_MAP = {
  {ARM_R0, "ARM_R0"},
  {ARM_R1, "ARM_R1"},
  {ARM_R2, "ARM_R2"},
  {ARM_R3, "ARM_R3"},
  {ARM_R4, "ARM_R4"},
  {ARM_R5, "ARM_R5"},
  {ARM_R6, "ARM_R6"},
  {ARM_R7, "ARM_R7"},
  {ARM_R8, "ARM_R8"},
  {ARM_R9, "ARM_R9"},
  {ARM_R10, "ARM_R10"},
  {ARM_R11, "ARM_R11"},
  {ARM_R12, "ARM_R12"},
  {ARM_SP, "ARM_SP"},
  {ARM_LR, "ARM_LR"},
  {ARM_PC, "ARM_PC"},
};

#endif  // _UNWIND_DWARF_REGMAP_H_

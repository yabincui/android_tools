#ifndef _DWARF_STRING_H_
#define _DWARF_STRING_H_

#include <unordered_map>

#include <dwarf.h>

/* DWARF tags.  */
static const std::unordered_map<int, const char*> DWARF_TAG_MAP = {
    {DW_TAG_array_type, "DW_TAG_array_type"},

    {DW_TAG_array_type, "DW_TAG_array_type"},
    {DW_TAG_class_type, "DW_TAG_class_type"},
    {DW_TAG_entry_point, "DW_TAG_entry_point"},
    {DW_TAG_enumeration_type, "DW_TAG_enumeration_type"},
    {DW_TAG_formal_parameter, "DW_TAG_formal_parameter"},
    {DW_TAG_imported_declaration, "DW_TAG_imported_declaration"},
    {DW_TAG_label, "DW_TAG_label"},
    {DW_TAG_lexical_block, "DW_TAG_lexical_block"},
    {DW_TAG_member, "DW_TAG_member"},
    {DW_TAG_pointer_type, "DW_TAG_pointer_type"},
    {DW_TAG_reference_type, "DW_TAG_reference_type"},
    {DW_TAG_compile_unit, "DW_TAG_compile_unit"},
    {DW_TAG_string_type, "DW_TAG_string_type"},
    {DW_TAG_structure_type, "DW_TAG_structure_type"},
    {DW_TAG_subroutine_type, "DW_TAG_subroutine_type"},
    {DW_TAG_typedef, "DW_TAG_typedef"},
    {DW_TAG_union_type, "DW_TAG_union_type"},
    {DW_TAG_unspecified_parameters, "DW_TAG_unspecified_parameters"},
    {DW_TAG_variant, "DW_TAG_variant"},
    {DW_TAG_common_block, "DW_TAG_common_block"},
    {DW_TAG_common_inclusion, "DW_TAG_common_inclusion"},
    {DW_TAG_inheritance, "DW_TAG_inheritance"},
    {DW_TAG_inlined_subroutine, "DW_TAG_inlined_subroutine"},
    {DW_TAG_module, "DW_TAG_module"},
    {DW_TAG_ptr_to_member_type, "DW_TAG_ptr_to_member_type"},
    {DW_TAG_set_type, "DW_TAG_set_type"},
    {DW_TAG_subrange_type, "DW_TAG_subrange_type"},
    {DW_TAG_with_stmt, "DW_TAG_with_stmt"},
    {DW_TAG_access_declaration, "DW_TAG_access_declaration"},
    {DW_TAG_base_type, "DW_TAG_base_type"},
    {DW_TAG_catch_block, "DW_TAG_catch_block"},
    {DW_TAG_const_type, "DW_TAG_const_type"},
    {DW_TAG_constant, "DW_TAG_constant"},
    {DW_TAG_enumerator, "DW_TAG_enumerator"},
    {DW_TAG_file_type, "DW_TAG_file_type"},
    {DW_TAG_friend, "DW_TAG_friend"},
    {DW_TAG_namelist, "DW_TAG_namelist"},
    {DW_TAG_namelist_item, "DW_TAG_namelist_item"},
    {DW_TAG_packed_type, "DW_TAG_packed_type"},
    {DW_TAG_subprogram, "DW_TAG_subprogram"},
    {DW_TAG_template_type_parameter, "DW_TAG_template_type_parameter"},
    {DW_TAG_template_value_parameter, "DW_TAG_template_value_parameter"},
    {DW_TAG_thrown_type, "DW_TAG_thrown_type"},
    {DW_TAG_try_block, "DW_TAG_try_block"},
    {DW_TAG_variant_part, "DW_TAG_variant_part"},
    {DW_TAG_variable, "DW_TAG_variable"},
    {DW_TAG_volatile_type, "DW_TAG_volatile_type"},
    {DW_TAG_dwarf_procedure, "DW_TAG_dwarf_procedure"},
    {DW_TAG_restrict_type, "DW_TAG_restrict_type"},
    {DW_TAG_interface_type, "DW_TAG_interface_type"},
    {DW_TAG_namespace, "DW_TAG_namespace"},
    {DW_TAG_imported_module, "DW_TAG_imported_module"},
    {DW_TAG_unspecified_type, "DW_TAG_unspecified_type"},
    {DW_TAG_partial_unit, "DW_TAG_partial_unit"},
    {DW_TAG_imported_unit, "DW_TAG_imported_unit"},
    /* 0x3e reserved.  */
    {DW_TAG_condition, "DW_TAG_condition"},
    {DW_TAG_shared_type, "DW_TAG_shared_type"},
    {DW_TAG_type_unit, "DW_TAG_type_unit"},
    {DW_TAG_rvalue_reference_type, "DW_TAG_rvalue_reference_type"},
    {DW_TAG_template_alias, "DW_TAG_template_alias"},

    /* DWARF 5.  */
    {DW_TAG_atomic_type, "DW_TAG_atomic_type"},

    {DW_TAG_lo_user, "DW_TAG_lo_user"},

    {DW_TAG_MIPS_loop, "DW_TAG_MIPS_loop"},
    {DW_TAG_format_label, "DW_TAG_format_label"},
    {DW_TAG_function_template, "DW_TAG_function_template"},
    {DW_TAG_class_template, "DW_TAG_class_template"},

    {DW_TAG_GNU_BINCL, "DW_TAG_GNU_BINCL"},
    {DW_TAG_GNU_EINCL, "DW_TAG_GNU_EINCL"},

    {DW_TAG_GNU_template_template_param, "DW_TAG_GNU_template_template_param"},
    {DW_TAG_GNU_template_parameter_pack, "DW_TAG_GNU_template_parameter_pack"},
    {DW_TAG_GNU_formal_parameter_pack, "DW_TAG_GNU_formal_parameter_pack"},
    {DW_TAG_GNU_call_site, "DW_TAG_GNU_call_site"},
    {DW_TAG_GNU_call_site_parameter, "DW_TAG_GNU_call_site_parameter"},

    {DW_TAG_hi_user, "DW_TAG_hi_user"},
};

/* DWARF attributes encodings.  */
static const std::unordered_map<int, const char*> DWARF_AT_MAP = {
    {DW_AT_sibling, "DW_AT_sibling"},
    {DW_AT_location, "DW_AT_location"},
    {DW_AT_name, "DW_AT_name"},
    {DW_AT_ordering, "DW_AT_ordering"},
    {DW_AT_subscr_data, "DW_AT_subscr_data"},
    {DW_AT_byte_size, "DW_AT_byte_size"},
    {DW_AT_bit_offset, "DW_AT_bit_offset"},
    {DW_AT_bit_size, "DW_AT_bit_size"},
    {DW_AT_element_list, "DW_AT_element_list"},
    {DW_AT_stmt_list, "DW_AT_stmt_list"},
    {DW_AT_low_pc, "DW_AT_low_pc"},
    {DW_AT_high_pc, "DW_AT_high_pc"},
    {DW_AT_language, "DW_AT_language"},
    {DW_AT_member, "DW_AT_member"},
    {DW_AT_discr, "DW_AT_discr"},
    {DW_AT_discr_value, "DW_AT_discr_value"},
    {DW_AT_visibility, "DW_AT_visibility"},
    {DW_AT_import, "DW_AT_import"},
    {DW_AT_string_length, "DW_AT_string_length"},
    {DW_AT_common_reference, "DW_AT_common_reference"},
    {DW_AT_comp_dir, "DW_AT_comp_dir"},
    {DW_AT_const_value, "DW_AT_const_value"},
    {DW_AT_containing_type, "DW_AT_containing_type"},
    {DW_AT_default_value, "DW_AT_default_value"},
    {DW_AT_inline, "DW_AT_inline"},
    {DW_AT_is_optional, "DW_AT_is_optional"},
    {DW_AT_lower_bound, "DW_AT_lower_bound"},
    {DW_AT_producer, "DW_AT_producer"},
    {DW_AT_prototyped, "DW_AT_prototyped"},
    {DW_AT_return_addr, "DW_AT_return_addr"},
    {DW_AT_start_scope, "DW_AT_start_scope"},
    {DW_AT_bit_stride, "DW_AT_bit_stride"},
    {DW_AT_upper_bound, "DW_AT_upper_bound"},
    {DW_AT_abstract_origin, "DW_AT_abstract_origin"},
    {DW_AT_accessibility, "DW_AT_accessibility"},
    {DW_AT_address_class, "DW_AT_address_class"},
    {DW_AT_artificial, "DW_AT_artificial"},
    {DW_AT_base_types, "DW_AT_base_types"},
    {DW_AT_calling_convention, "DW_AT_calling_convention"},
    {DW_AT_count, "DW_AT_count"},
    {DW_AT_data_member_location, "DW_AT_data_member_location"},
    {DW_AT_decl_column, "DW_AT_decl_column"},
    {DW_AT_decl_file, "DW_AT_decl_file"},
    {DW_AT_decl_line, "DW_AT_decl_line"},
    {DW_AT_declaration, "DW_AT_declaration"},
    {DW_AT_discr_list, "DW_AT_discr_list"},
    {DW_AT_encoding, "DW_AT_encoding"},
    {DW_AT_external, "DW_AT_external"},
    {DW_AT_frame_base, "DW_AT_frame_base"},
    {DW_AT_friend, "DW_AT_friend"},
    {DW_AT_identifier_case, "DW_AT_identifier_case"},
    {DW_AT_macro_info, "DW_AT_macro_info"},
    {DW_AT_namelist_item, "DW_AT_namelist_item"},
    {DW_AT_priority, "DW_AT_priority"},
    {DW_AT_segment, "DW_AT_segment"},
    {DW_AT_specification, "DW_AT_specification"},
    {DW_AT_static_link, "DW_AT_static_link"},
    {DW_AT_type, "DW_AT_type"},
    {DW_AT_use_location, "DW_AT_use_location"},
    {DW_AT_variable_parameter, "DW_AT_variable_parameter"},
    {DW_AT_virtuality, "DW_AT_virtuality"},
    {DW_AT_vtable_elem_location, "DW_AT_vtable_elem_location"},
    {DW_AT_allocated, "DW_AT_allocated"},
    {DW_AT_associated, "DW_AT_associated"},
    {DW_AT_data_location, "DW_AT_data_location"},
    {DW_AT_byte_stride, "DW_AT_byte_stride"},
    {DW_AT_entry_pc, "DW_AT_entry_pc"},
    {DW_AT_use_UTF8, "DW_AT_use_UTF8"},
    {DW_AT_extension, "DW_AT_extension"},
    {DW_AT_ranges, "DW_AT_ranges"},
    {DW_AT_trampoline, "DW_AT_trampoline"},
    {DW_AT_call_column, "DW_AT_call_column"},
    {DW_AT_call_file, "DW_AT_call_file"},
    {DW_AT_call_line, "DW_AT_call_line"},
    {DW_AT_description, "DW_AT_description"},
    {DW_AT_binary_scale, "DW_AT_binary_scale"},
    {DW_AT_decimal_scale, "DW_AT_decimal_scale"},
    {DW_AT_small, "DW_AT_small"},
    {DW_AT_decimal_sign, "DW_AT_decimal_sign"},
    {DW_AT_digit_count, "DW_AT_digit_count"},
    {DW_AT_picture_string, "DW_AT_picture_string"},
    {DW_AT_mutable, "DW_AT_mutable"},
    {DW_AT_threads_scaled, "DW_AT_threads_scaled"},
    {DW_AT_explicit, "DW_AT_explicit"},
    {DW_AT_object_pointer, "DW_AT_object_pointer"},
    {DW_AT_endianity, "DW_AT_endianity"},
    {DW_AT_elemental, "DW_AT_elemental"},
    {DW_AT_pure, "DW_AT_pure"},
    {DW_AT_recursive, "DW_AT_recursive"},
    {DW_AT_signature, "DW_AT_signature"},
    {DW_AT_main_subprogram, "DW_AT_main_subprogram"},
    {DW_AT_data_bit_offset, "DW_AT_data_bit_offset"},
    {DW_AT_const_expr, "DW_AT_const_expr"},
    {DW_AT_enum_class, "DW_AT_enum_class"},
    {DW_AT_linkage_name, "DW_AT_linkage_name"},

    /* DWARF5 attribute values.  */
    {DW_AT_noreturn, "DW_AT_noreturn"},

    {DW_AT_lo_user, "DW_AT_lo_user"},

    {DW_AT_MIPS_fde, "DW_AT_MIPS_fde"},
    {DW_AT_MIPS_loop_begin, "DW_AT_MIPS_loop_begin"},
    {DW_AT_MIPS_tail_loop_begin, "DW_AT_MIPS_tail_loop_begin"},
    {DW_AT_MIPS_epilog_begin, "DW_AT_MIPS_epilog_begin"},
    {DW_AT_MIPS_loop_unroll_factor, "DW_AT_MIPS_loop_unroll_factor"},
    {DW_AT_MIPS_software_pipeline_depth, "DW_AT_MIPS_software_pipeline_depth"},
    {DW_AT_MIPS_linkage_name, "DW_AT_MIPS_linkage_name"},
    {DW_AT_MIPS_stride, "DW_AT_MIPS_stride"},
    {DW_AT_MIPS_abstract_name, "DW_AT_MIPS_abstract_name"},
    {DW_AT_MIPS_clone_origin, "DW_AT_MIPS_clone_origin"},
    {DW_AT_MIPS_has_inlines, "DW_AT_MIPS_has_inlines"},
    {DW_AT_MIPS_stride_byte, "DW_AT_MIPS_stride_byte"},
    {DW_AT_MIPS_stride_elem, "DW_AT_MIPS_stride_elem"},
    {DW_AT_MIPS_ptr_dopetype, "DW_AT_MIPS_ptr_dopetype"},
    {DW_AT_MIPS_allocatable_dopetype, "DW_AT_MIPS_allocatable_dopetype"},
    {DW_AT_MIPS_assumed_shape_dopetype, "DW_AT_MIPS_assumed_shape_dopetype"},
    {DW_AT_MIPS_assumed_size, "DW_AT_MIPS_assumed_size"},

    /* GNU extensions.  */
    {DW_AT_sf_names, "DW_AT_sf_names"},
    {DW_AT_src_info, "DW_AT_src_info"},
    {DW_AT_mac_info, "DW_AT_mac_info"},
    {DW_AT_src_coords, "DW_AT_src_coords"},
    {DW_AT_body_begin, "DW_AT_body_begin"},
    {DW_AT_body_end, "DW_AT_body_end"},
    {DW_AT_GNU_vector, "DW_AT_GNU_vector"},
    {DW_AT_GNU_guarded_by, "DW_AT_GNU_guarded_by"},
    {DW_AT_GNU_pt_guarded_by, "DW_AT_GNU_pt_guarded_by"},
    {DW_AT_GNU_guarded, "DW_AT_GNU_guarded"},
    {DW_AT_GNU_pt_guarded, "DW_AT_GNU_pt_guarded"},
    {DW_AT_GNU_locks_excluded, "DW_AT_GNU_locks_excluded"},
    {DW_AT_GNU_exclusive_locks_required, "DW_AT_GNU_exclusive_locks_required"},
    {DW_AT_GNU_shared_locks_required, "DW_AT_GNU_shared_locks_required"},
    {DW_AT_GNU_odr_signature, "DW_AT_GNU_odr_signature"},
    {DW_AT_GNU_template_name, "DW_AT_GNU_template_name"},
    {DW_AT_GNU_call_site_value, "DW_AT_GNU_call_site_value"},
    {DW_AT_GNU_call_site_data_value, "DW_AT_GNU_call_site_data_value"},
    {DW_AT_GNU_call_site_target, "DW_AT_GNU_call_site_target"},
    {DW_AT_GNU_call_site_target_clobbered, "DW_AT_GNU_call_site_target_clobbered"},
    {DW_AT_GNU_tail_call, "DW_AT_GNU_tail_call"},
    {DW_AT_GNU_all_tail_call_sites, "DW_AT_GNU_all_tail_call_sites"},
    {DW_AT_GNU_all_call_sites, "DW_AT_GNU_all_call_sites"},
    {DW_AT_GNU_all_source_call_sites, "DW_AT_GNU_all_source_call_sites"},
    {DW_AT_GNU_macros, "DW_AT_GNU_macros"},
    {DW_AT_GNU_deleted, "DW_AT_GNU_deleted"},

    {DW_AT_hi_user, "DW_AT_hi_user"},
  };

/* DWARF form encodings.  */
static const std::unordered_map<int, const char*> DWARF_FORM_MAP =
  {
    {DW_FORM_addr, "DW_FORM_addr"},
    {DW_FORM_block2, "DW_FORM_block2"},
    {DW_FORM_block4, "DW_FORM_block4"},
    {DW_FORM_data2, "DW_FORM_data2"},
    {DW_FORM_data4, "DW_FORM_data4"},
    {DW_FORM_data8, "DW_FORM_data8"},
    {DW_FORM_string, "DW_FORM_string"},
    {DW_FORM_block, "DW_FORM_block"},
    {DW_FORM_block1, "DW_FORM_block1"},
    {DW_FORM_data1, "DW_FORM_data1"},
    {DW_FORM_flag, "DW_FORM_flag"},
    {DW_FORM_sdata, "DW_FORM_sdata"},
    {DW_FORM_strp, "DW_FORM_strp"},
    {DW_FORM_udata, "DW_FORM_udata"},
    {DW_FORM_ref_addr, "DW_FORM_ref_addr"},
    {DW_FORM_ref1, "DW_FORM_ref1"},
    {DW_FORM_ref2, "DW_FORM_ref2"},
    {DW_FORM_ref4, "DW_FORM_ref4"},
    {DW_FORM_ref8, "DW_FORM_ref8"},
    {DW_FORM_ref_udata, "DW_FORM_ref_udata"},
    {DW_FORM_indirect, "DW_FORM_indirect"},
    {DW_FORM_sec_offset, "DW_FORM_sec_offset"},
    {DW_FORM_exprloc, "DW_FORM_exprloc"},
    {DW_FORM_flag_present, "DW_FORM_flag_present"},
    {DW_FORM_ref_sig8, "DW_FORM_ref_sig8"},

    {DW_FORM_GNU_ref_alt, "DW_FORM_GNU_ref_alt"}, /* offset in alternate .debuginfo.  */
    {DW_FORM_GNU_strp_alt, "DW_FORM_GNU_strp_alt"}, /* offset in alternate .debug_str. */
  };

#endif  // _DWARF_STRING_H_
